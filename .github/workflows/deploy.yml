]name: CI/CD Pipeline for React v3

on:
  push:
    branches:
      - main  # Trigger workflow on push to the main branch

jobs:
  build-and-deploy-v3:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push Docker image for my-app
      uses: docker/build-push-action@v2
      with:
        platforms: linux/amd64,linux/arm64
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:${{ github.run_id }}
          ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest

    - name: SSH into server and deploy my-app to Docker Swarm
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          IMAGE_TAG=${{ github.run_id }}
          APP_NAME="my-app"
          CSV_FILE="/home/${{ secrets.SSH_USER }}/versions.csv"

          # Ensure the directory exists
          mkdir -p $(dirname "$CSV_FILE")

          # Pull the new Docker image
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/$APP_NAME:$IMAGE_TAG
          
          # Ensure the Docker network exists
          docker network ls | grep -q "my_network" || docker network create --driver overlay my_network

          # Deploy or update the my-app service
          if ! docker service ls | grep -q "$APP_NAME"; then
            echo "Creating the $APP_NAME service..."
            docker service create \
              --name $APP_NAME \
              --replicas 2 \
              --publish 8080:80 \
              --network my_network \
              ${{ secrets.DOCKER_HUB_USERNAME }}/$APP_NAME:$IMAGE_TAG
          else
            echo "Updating the $APP_NAME service..."
            docker service update --image ${{ secrets.DOCKER_HUB_USERNAME }}/$APP_NAME:$IMAGE_TAG $APP_NAME
          fi  

          # ✅ Check if the versions.csv file exists
          if [ -f "$CSV_FILE" ]; then
            LAST_ROW=$(tail -n 1 "$CSV_FILE")
            LAST_SERIAL=$(echo "$LAST_ROW" | cut -d',' -f1)
            if [[ "$LAST_SERIAL" =~ ^[0-9]+$ ]]; then
              NEW_SERIAL=$((LAST_SERIAL + 1))
            else
              NEW_SERIAL=1
            fi
          else
            echo "Serial Number,Application,Image_Version" > "$CSV_FILE"
            NEW_SERIAL=1
          fi

          # ✅ Append the new deployment entry with proper newline formatting
          echo -e "$NEW_SERIAL,$APP_NAME,$IMAGE_TAG" >> "$CSV_FILE"
          echo "versions.csv updated successfully."

    - name: Retrieve versions.csv from server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: cat /home/${{ secrets.SSH_USER }}/versions.csv
name: CI/CD Pipeline for React v3

on:
  push:
    branches:
      - main  # Trigger workflow on push to the main branch

jobs:
  build-and-deploy-v3:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push Docker image for my-app
      uses: docker/build-push-action@v2
      with:
        platforms: linux/amd64,linux/arm64
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:${{ github.run_id }}
          ${{ secrets.DOCKER_HUB_USERNAME }}/my-app:latest

    - name: SSH into server and deploy my-app to Docker Swarm
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          IMAGE_TAG=${{ github.run_id }}
          APP_NAME="my-app"
          CSV_FILE="/home/${{ secrets.SSH_USER }}/versions.csv"

          # Ensure the directory exists
          mkdir -p $(dirname "$CSV_FILE")

          # Check if versions.csv exists and get the last serial number
          if [ -f "$CSV_FILE" ]; then
            LAST_ROW=$(tail -n 1 "$CSV_FILE")
            LAST_SERIAL=$(echo "$LAST_ROW" | cut -d',' -f1)
            if [[ "$LAST_SERIAL" =~ ^[0-9]+$ ]]; then
              NEW_SERIAL=$((LAST_SERIAL + 1))
            else
              NEW_SERIAL=1
            fi
          else
            echo "Serial Number,Application,Image_Version" > "$CSV_FILE"
            NEW_SERIAL=1
          fi

          # ✅ Append the current deployment entry
          echo "$NEW_SERIAL,$APP_NAME,$IMAGE_TAG" >> "$CSV_FILE"

          # ✅ Predict and store the next deployment entry (placeholder)
          NEXT_SERIAL=$((NEW_SERIAL + 1))
          echo "$NEXT_SERIAL,$APP_NAME,NEXT_DEPLOYMENT_RUN_ID" >> "$CSV_FILE"

          echo "versions.csv updated with current and next deployment info."

    - name: Retrieve versions.csv from server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: cat /home/${{ secrets.SSH_USER }}/versions.csv
