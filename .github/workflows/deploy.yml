name: CI/CD Pipeline for React v3

on:
  push:
    branches:
      - main  # Trigger workflow when changes are pushed to main branch

jobs:
  build-and-deploy-v3:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: List repository files for debugging
      run: ls -R  # Helps debug if files are missing

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Build and push Docker image for my-appv3
      run: |
        IMAGE_TAG=${{ github.run_id }}  # Generate unique tag using GitHub Run ID
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/my-appv3:$IMAGE_TAG -f ./my-appv3/Dockerfile ./my-appv3
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-appv3:$IMAGE_TAG

    - name: SSH into server and deploy my-appv3 to Docker Swarm
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          IMAGE_TAG=${{ github.run_id }}  # Set the tag to GitHub Run ID
          # Pull the latest image from DockerHub
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my-appv3:$IMAGE_TAG
          
          # Check if the service exists, create it if not
          if ! docker service ls | grep -q "my-appv3"; then
            echo "Creating my-appv3 service on port 8080"
            docker service create --name my-appv3 --replicas 2 --publish 8080:80 ${{ secrets.DOCKER_HUB_USERNAME }}/my-appv3:$IMAGE_TAG
          else
            echo "my-appv3 service already exists, updating it"
            docker service update --image ${{ secrets.DOCKER_HUB_USERNAME }}/my-appv3:$IMAGE_TAG my-appv3
          fi
